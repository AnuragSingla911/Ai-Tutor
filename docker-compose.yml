# Docker Compose file for AI Tutor

services:
  # PostgreSQL Database for user data, quiz attempts, progress, and RAG corpus
  postgres:
    image: pgvector/pgvector:pg16 # Use pgvector image with PostgreSQL 16
    container_name: tutor_postgres
    environment:
      POSTGRES_DB: tutor_db
      POSTGRES_USER: tutor_user
      POSTGRES_PASSWORD: tutor_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tutor_network
    command: >
      postgres -c shared_preload_libraries=vector
      -c log_statement=all
      -c log_destination=stderr

  # MongoDB for versioned questions and content
  mongodb:
    image: mongo:7
    container_name: tutor_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: aitutor
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - tutor_network

  # Redis for caching, sessions, and background job queues
  redis:
    image: redis:7-alpine
    container_name: tutor_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tutor_network
    command: redis-server --appendonly yes

  # Backend API with v1 routes, auth, progress tracking, and GraphQL
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tutor_backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: tutor_db
      DB_USER: tutor_user
      DB_PASSWORD: tutor_password
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/tutor_content?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      ML_SERVICE_URL: http://agent:8000
      REDIS_URL: redis://redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - tutor_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python AI Agent Service with LangChain/LangGraph
  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    container_name: tutor_agent
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      # Database connection strings
      POSTGRES_URL: postgresql://tutor_user:tutor_password@postgres:5432/tutor_db
      MONGO_URL: mongodb://admin:admin123@mongodb:27017/tutor_content?authSource=admin
      REDIS_URL: redis://redis:6379
      # OpenAI API key for LLM integration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Agent configuration
      MAX_QUESTIONS_PER_BATCH: 10
      QUESTION_GENERATION_TIMEOUT: 30
      MAX_RETRIES: 3
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - mongodb
      - redis
    volumes:
      - ./agent:/app
      - ml_models:/app/models
      - ml_cache:/app/cache
    networks:
      - tutor_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App with GraphQL support
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tutor_frontend
    environment:
      VITE_API_URL: http://localhost:5000/api
      VITE_GRAPHQL_URL: http://localhost:5000/graphql
      VITE_AGENT_URL: http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
      - agent
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - tutor_network

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: tutor_nginx
    ports:
      - "80:80"
    volumes:
      - ./ops/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
      - agent
    networks:
      - tutor_network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  ml_models: # For ML models/embeddings
  ml_cache: # For HuggingFace/LangChain caches

networks:
  tutor_network:
    driver: bridge